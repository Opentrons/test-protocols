# Import Libraries
import os
import json
import pandas as pd
from datetime import datetime, date
import math

# Initialize an empty DataFrame to store the final data
final_df = pd.DataFrame()

# Folder path containing JSON files 
folder_path = "/Users/RhyannClarke/Documents/Protocol Run Logs/30OCT23"
# Location of .csv file to save LPC data
output_folder = '/Users/RhyannClarke/Documents/SavedLPC/'

# Labware Replacement Names
log_labware_names = ['opentrons_flex_96_tiprack_50ul', 'opentrons_flex_96_tiprack_200ul', 'opentrons_flex_96_tiprack_1000ul', 'armadillo_96_wellplate_200ul_pcr_full_skirt',  'nest_12_reservoir_15ml','nest_96_wellplate_2ml_deep',  'nest_1_reservoir_195ml', 'nest_1_reservoir_290ml','opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical', 'opentrons_15_tuberack_nest_15ml_conical',  'appliedbiosystemsmicroamp_384_wellplate_40ul']
sheet_names = ['Opentrons Flex 96 Tip Rack 50 ul', 'Opentrons Flex 96 Tip Rack 200 ul', 'Opentrons Flex 96 Tip Rack 1000 ul','(Retired) Armadillo 96 Well Plate 200 ul PCR Full Skirt','NEST 12 Well Reservoir 15mL', 'NEST 96 Well Plate 2mL Deep', 'NEST 1 Reservoir 195mL', 'NEST 1 Reservoir 290mL','Opentrons 10 Tube Rack with Falcon 4x50 mL, 6x15 mL Conical', 'Opentrons 10 Tube Rack with Falcon 4x50 mL, 6x15 mL Conical', 'Applied Biosystems Microamp 384 wellplate 40ul'] 

# Iterate through all files in the folder
for filename in os.listdir(folder_path):
    if filename.endswith(".json"):
        path = os.path.join(folder_path, filename)
        robot = filename.split('_')[0]
        protocol = filename.split('_')[1]
        date = filename.split('_')[-3].split('T')[0]
        print(date)
        with open(path, 'r') as file:
            data = json.load(file) # reads JSON file

        df1 = pd.json_normalize(data) # converts to dataframe
        labware_offsets = df1['data.labwareOffsets']

        # Create a dictionary to store vectors and labware with matching slotName
        slotname_data = {}

        # loop to determine most recent labware position offset
        for offsets in labware_offsets:
            for offset in offsets:
                slot_name = offset['location'].get('slotName')
                created_at = offset['createdAt']
                vector = offset['vector']
                labware = offset['definitionUri'].split('/')[-2] if 'definitionUri' in offset else None

                if slot_name is not None:
                    if slot_name not in slotname_data:
                        slotname_data[slot_name] = {'createdAt': None, 'vector': None, 'labware': None}

                    if (
                        slotname_data[slot_name]['createdAt'] is None
                        or datetime.fromisoformat(created_at) > datetime.fromisoformat(slotname_data[slot_name]['createdAt'])
                    ):
                        slotname_data[slot_name] = {'createdAt': created_at, 'vector': vector, 'labware': labware}

        # Create a DataFrame with the latest data for each slotName
        for slot_name, data in slotname_data.items():
            i = 0
            if data['createdAt'] is not None:
                df = pd.DataFrame({
                    'Robot': robot,
                    'Protocol': protocol,
                    'Date': date,
                    'Slot Name': slot_name,
                    'Labware': data['labware'],
                    'x': data['vector']['x'],
                    'y': data['vector']['y'],
                    'z': data['vector']['z'], 
                }, index = [i])
                i = i + 1
                # Concatenate the current DataFrame to the final DataFrame
                df['Distance'] = df.apply(lambda row: math.sqrt(data['vector']['x']**2 + data['vector']['y']**2 + data['vector']['x']**2), axis=1)
                final_df = pd.concat([final_df, df], ignore_index=True)

final_df = final_df.replace(log_labware_names, sheet_names)

# Save the combined DataFrame to a CSV file in the folder with today's date
date = str(datetime.now()).split(' ')[0]
savedfile = '-'.join([date, 'labware-offsets.csv'])
csv_filename = os.path.join(output_folder, savedfile)
final_df.to_csv(csv_filename, index=False)

